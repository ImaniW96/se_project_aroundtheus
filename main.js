!function(){"use strict";class e{constructor(e,t,s,r,i){this._cardData=e,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this.id=e._id,this._likes=e.likes,this.isLiked=e.isLiked}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._cardData)}))}deleteCard(){this._cardElement.remove(),this._cardElement=null}renderLike(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}setIsLiked(){this.isLiked=!this.isLiked,this.renderLike()}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._cardDeleteButton=this._element.querySelector(".card__trash-icon"),this._cardImageEl=this._element.querySelector(".card__image"),this._cardTitleEl=this._element.querySelector(".card__title"),this._cardImageEl.setAttribute("src",this._link),this._cardImageEl.setAttribute("alt",this._name),this._cardTitleEl.textContent=this._name,this._setEventListeners(),this.renderLike(),this._cardElement}}var t=class{constructor(e,t){this._settings=e,this._form=t,this._inputErrorClass=e._inputErrorClass,this._submitButton=this._form.querySelector(this._settings.submitButtonSelector),this._inputEls=[...this._form.querySelectorAll(this._settings.inputSelector)]}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(e){if(this._hasInvalidInput())return this._submitButton.classList.add(this._settings.inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}};class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target!==this._popupCloseButton&&e.target!==this._popupElement||this.close()}))}}class i extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__button")}setSubmitAction(e){this._handleFormSubmit=e}_getInputValues(){const e={};return this._popupForm.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}close(){this._popupForm.reset(),super.close()}setEventListeners(){console.log(this._popupForm),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)})),super.setEventListeners()}setSubmitButtonText(e){this._submitButton.textContent=e}}const o=document.querySelector("#profile-edit-button"),n=document.querySelector("#profile-edit-modal"),l=document.querySelector("#profile-add-modal"),a=document.querySelector("#profile-picture-icon"),c=(document.querySelector("#preview-card-modal"),document.querySelector(".profile__title"),document.querySelector(".modal__image"),document.querySelector(".modal__caption"),document.querySelector("#profile-icon")),d=(document.querySelector(".profile__description"),document.querySelector(".profile__add-button")),u=document.querySelector("#profile-edit-title-input"),h=(document.querySelector("#add-title-input"),document.querySelector("#profile-description-input")),_=n.querySelector(".modal__form"),m=l.querySelector(".modal__form"),p=a.querySelector(".modal__form"),S=(document.querySelector(".cards__list"),document.querySelector(".cards__list"),document.querySelector("#card-template").content.firstElementChild,document.querySelector("#edit-profile-close-button"),document.querySelector("#add-card-close-button"),m.querySelector(".modal__input_type_url"),m.querySelector(".modal__input_type_url"),document.querySelector("#preview-card-image-close-button"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visable"}),E=new i("#profile-add-modal",(e=>{E.setSubmitButtonText("Saving...."),C.createCard(e).then((e=>{const t=T(e);x.addItem(t),E.close(),L.resetValidation()})).finally((()=>{E.setSubmitButtonText("Save")}))})),b=new i("#confirm-card-delete",(e=>{b.setSubmitButtonText("Deleting...."),C.deleteCard(card.id).then((()=>{card.deleteCard(),b.close(),renderItems()})).catch((e=>{console.error(e)})).finally((()=>{b.setSubmitButtonText("Delete")}))})),f=new i("#profile-picture-icon",(e=>{f.setSubmitButtonText("Saving...."),C.updateProfilePicture(e).then((e=>{k.setUserAvatar(e),f.close()})).catch((e=>{console.error(e)})).finally((()=>{f.setSubmitButtonText("Save")}))}));b.setEventListeners();const v=new i("#profile-edit-modal",(e=>{console.log(e),g.resetValidation(),v.close(),console.log(e),v.setSubmitButtonText("Saving...."),C.editUserProfile({name:e.name,about:e.about}).then((e=>{let{name:t,about:s}=e;k.setUserInfo({name:t,about:s})})).catch((e=>{console.error(e),alert(`${e}.Failed to update profile`)})).finally((()=>{v.setSubmitButtonText("Save")}))}));document.querySelector(".modal__form"),E.setEventListeners(),v.setEventListeners();const y=new class extends r{constructor(e){super({popupSelector:e})}open(e){const t=this._popupElement.querySelector(".modal__image");t.src=e.link,t.alt=e.name,this._popupElement.querySelector(".modal__caption").textContent=e.name,super.open()}}("#preview-card-modal");y.setEventListeners();const k=new class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e){this._name.textContent=e.name,this._about.textContent=e.about}setUserAvatar(e){this._avatar.src=e.avatar}}(".profile__title",".profile__description",".profile__image"),g=new t(S,_),L=new t(S,m),q=new t(S,p),C=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>this.checkResponse(e)))}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((e=>this.checkResponse(e)))}editUserProfile(e){return console.log(e),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>this.checkResponse(e)))}likeCard(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>this.checkResponse(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this.checkResponse(e)))}loadUserInfo(){return fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"GET",headers:this._headers}).then((e=>this.checkResponse(e)))}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar `,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then((e=>this.checkResponse(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"e3f5bc64-c279-4474-9c65-8c5ae0831eb9","Content-Type":"application/json"}});function I(e){y.open(e)}function B(e){console.log(e),b.open(),b.setSubmitAction((()=>{b.setSubmitButtonText("Deleting...."),C.deleteCard(e.id).then((()=>{e.deleteCard(),b.close()})).catch((e=>{console.error(e)})).finally((()=>{b.setSubmitButtonText("Delete")}))}))}function T(t){return new e(t,"#card-template",I,B,U).getView()}let x;function U(e){C.likeCard(e.id,e.isLiked).then((t=>{e.setIsLiked()})).catch((e=>{console.error(e),alert(`${e}. Failed to like or dislike card`)}))}f.setEventListeners(),c.addEventListener("click",(()=>{f.open()})),o.addEventListener("click",(()=>{const{name:e,about:t}=k.getUserInfo();u.value=e,h.value=t,g.resetValidation(),v.open()})),d.addEventListener("click",(()=>{E.open()})),g.enableValidation(),L.enableValidation(),q.enableValidation(),C.loadUserInfo().then((e=>{k.setUserInfo(e),k.setUserAvatar(e)})).catch((e=>{console.error(e),alert(`${e}. Failed to get user info.`)})),C.getInitialCards().then((e=>{x=new s({items:e.reverse(),renderer:e=>{const t=T(e);x.addItem(t)}},".cards__list"),x.renderItems()})).catch((e=>{console.error(e),alert(`${e}. Failed to add card.`)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,